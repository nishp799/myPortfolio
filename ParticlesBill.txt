// -------------------------------------------------- First copy this css:

#particleCanvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: -1; /* Pushes it behind everything */
    pointer-events: none; /* Ensures interactions pass through */
    background-color: #000;
}

// -------------------------------------------------- paste it inside your css file

// -------------------------------------------------- next decerease the backgriund opacities

 /* Background Colors */
    --background-primary: rgba(24, 24, 24, 0);
    --background-secondary: rgba(24, 24, 24, 0);

// -------------------------------------------------- Finally, paste one of the particle systems on the particle.js page

// -------------------------------------------------- Particle System 1: Connections

// Wait for the DOM to load
document.addEventListener('DOMContentLoaded', function() {
    const canvas = document.getElementById('particleCanvas');
    const ctx = canvas.getContext('2d');

    // Set canvas size
    function resizeCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    }

    // Initial resize
    resizeCanvas();

    // Resize on window change
    window.addEventListener('resize', resizeCanvas);

    // Mouse position
    let mouse = {
        x: undefined,
        y: undefined,
        radius: 150
    };

    // Track mouse movement
    document.addEventListener('mousemove', function(event) {
        mouse.x = event.x;
        mouse.y = event.y;
    });

    // Particle class
    class Particle {
        constructor() {
            this.x = Math.random() * canvas.width;
            this.y = Math.random() * canvas.height;
            this.size = 3;
            this.baseX = this.x;
            this.baseY = this.y;
            this.density = (Math.random() * 30) + 1;
            this.distance;
        }

        draw() {
            ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
            ctx.closePath();
            ctx.fill();
        }

        update() {
            let dx = mouse.x - this.x;
            let dy = mouse.y - this.y;
            let distance = Math.sqrt(dx * dx + dy * dy);
            this.distance = distance;

            let forceDirectionX = dx / distance;
            let forceDirectionY = dy / distance;
            let maxDistance = mouse.radius;
            let force = (maxDistance - distance) / maxDistance;
            let directionX = forceDirectionX * force * this.density;
            let directionY = forceDirectionY * force * this.density;

            if (distance < mouse.radius) {
                this.x -= directionX;
                this.y -= directionY;
            } else {
                if (this.x !== this.baseX) {
                    let dx = this.x - this.baseX;
                    this.x -= dx/10;
                }
                if (this.y !== this.baseY) {
                    let dy = this.y - this.baseY;
                    this.y -= dy/10;
                }
            }
        }
    }

    // Create particle array
    const particles = [];
    function init() {
        for (let i = 0; i < 100; i++) {
            particles.push(new Particle());
        }
    }
    init();

    // Animation function
    function animate() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        particles.forEach(particle => {
            particle.update();
            particle.draw();
        });

        // Optional: Draw connections between particles
        connectParticles();

        requestAnimationFrame(animate);
    }

    // Connect particles with lines
    function connectParticles() {
        let opacityValue = 1;
        for (let i = 0; i < particles.length; i++) {
            for (let j = i; j < particles.length; j++) {
                let dx = particles[i].x - particles[j].x;
                let dy = particles[i].y - particles[j].y;
                let distance = Math.sqrt(dx * dx + dy * dy);

                if (distance < 120) {
                    opacityValue = 1 - (distance/120);
                    ctx.strokeStyle = `rgba(255, 255, 255, ${opacityValue})`;
                    ctx.lineWidth = 1;
                    ctx.beginPath();
                    ctx.moveTo(particles[i].x, particles[i].y);
                    ctx.lineTo(particles[j].x, particles[j].y);
                    ctx.stroke();
                }
            }
        }
    }

    // Start animation
    animate();

    // Handle touch events for mobile
    canvas.addEventListener('touchmove', function(event) {
        event.preventDefault();
        mouse.x = event.touches[0].clientX;
        mouse.y = event.touches[0].clientY;
    });

    canvas.addEventListener('touchend', function() {
        mouse.x = undefined;
        mouse.y = undefined;
    });
});

// -------------------------------------------------- Particle System 2: Hearts


// Wait for the DOM to load
document.addEventListener('DOMContentLoaded', function () {
    const canvas = document.getElementById('particleCanvas');
    const ctx = canvas.getContext('2d');

    // Set canvas size
    function resizeCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    }
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);

    // Heart Particle class
    class HeartParticle {
        constructor() {
            this.size = Math.random() * 20 + 10; // Random size between 10 and 30
            this.x = Math.random() * (canvas.width - this.size);
            this.y = Math.random() * (canvas.height - this.size);
            this.speedX = (Math.random() - 1) * 4; // Random speed
            this.speedY = (Math.random() - 1) * 4;
            this.color = `hsl(${Math.random() * (300-360)}, 100%, 70%)`; // Random heart colors
        }

        draw() {
            ctx.fillStyle = this.color;
            ctx.beginPath();

            let topCurveHeight = this.size * 0.6; // Controls the roundness of the top lobes

            // Start at the top center
            ctx.moveTo(this.x, this.y - this.size / 2);

            // Left curve
            ctx.bezierCurveTo(
                this.x - this.size, this.y - this.size * 1.6,  // Control point 1 (pulls left lobe up)
                this.x - this.size * 1.6, this.y,               // Control point 2
                this.x, this.y + this.size                     // End at bottom tip
            );

            // Right curve
            ctx.bezierCurveTo(
                this.x + this.size * 1.6, this.y,               // Control point 1
                this.x + this.size, this.y - this.size * 1.6,  // Control point 2 (pulls right lobe up)
                this.x, this.y - this.size / 2                 // End at the top center
            );

            ctx.closePath();
            ctx.fill();
        }

        update() {
            this.x += this.speedX;
            this.y += this.speedY;

            // Bounce off walls
            if (this.x - this.size <= 0 || this.x + this.size >= canvas.width) {
                this.speedX *= -1;
            }
            if (this.y - this.size <= 0 || this.y + this.size >= canvas.height) {
                this.speedY *= -1;
            }
        }
    }

    // Create heart particles
    const hearts = [];
    function init() {
        for (let i = 0; i < 50; i++) {
            hearts.push(new HeartParticle());
        }
    }
    init();

    // Animation loop
    function animate() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        hearts.forEach(heart => {
            heart.update();
            heart.draw();
        });
        requestAnimationFrame(animate);
    }
    animate();
});
